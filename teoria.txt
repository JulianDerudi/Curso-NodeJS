##############################  CLASE 2  ##############################

[[[  Single-Threading vs Multi-Threading  ]]]

Single-Threading: (modelo que usa Node.js)
    * Un hilo principal con event loop.
    * Delega tareas bloqueantes.
    * Altamente escalable.

Multi-Threading:
    * Multiples hilos simultaneo
    * Ideal para tareas de CPU intensivas
    * Mas complejo


Documentacion OFICIAL DE Node.js: 
    https://nodejs.org/en/learn/getting-started/introduction-to-nodejs



##############################  CLASE 3  ##############################

[[[  Tipos de Declaraciones de Funciones  ]]]

Funciones Declaradas:
    function search() {
        // proceso encapsulado
    }

Funciones Expresadas:
    const search = function () {
        // proceso encapsulado
    }

Arrow Functions:
    const search = () => {
        // proceso encapsulado
    }


[[[  Higher Order Functions (HOF) o callbacks  ]]]

// Donde la funciones son pasadas por parametro 

function calculator(a, b, action) {
    return action(a,b);
}

console.log(calculator(20, 10, (a, b) => a + b)); // 30


[[[  ARRAYS  ]]]

Metodos de array: 
    * arrayName[index]: para acceder a elementos precisos.
    * .lenght: para la longitud.
    * Push y Unshift: a침aden elementos al inicio y final.
    * Pop y Shift: eliminan elementos del inicio y final.
    * .join(): une elementos de un array en una cadena.
    * .map(): crea un nuevo array con los resultados de una funcion.
    * .filter(): crea un nuevo array con elementos que pasan una prueba.
    * .reduce(): reduce un array a un solo valor acumulado.

Iteracion de array:
    * ForEach: ejecuta una funci칩n para cada elemento del array.
    * For...of: permite recorrer elementos de forma mas sencilla que un for tradicional.


[[[  TEMPLATE LITERALS  ]]]

// Cadenas de texto que permiten expresiones incrustadas.
// se usan backticks (`) y permite insertar variables usando ${expresi칩n}.


[[[ GUIAS ]]]

Sobre funciones, arrays y template literals: MDN Web Docs
Libro interactivo para profundizar estos conceptos: Eloquent JavaScript



##############################  CLASE 4  ##############################

[[[  OBJETOS  ]]]
* Objetos literal:
        const hero = {
            alias: 'Cody',
            powers: ['fly', 'nightvision', 'stregth'],
            vitality: 100,
            drecreaseVitality: function(damage) {
                return this.vitality - damage
            }
        }

        hero.alias = 'Julian' //Cambiar valor
        hero[alias] = 'Julian' //Cambiar valor
        delete hero.alias //eliminar campo


* Objeto Funcional:
        function Hero(alias, vitality) {
            this.alias = alias;
            this.vitality = vitality;

            this.drecreaseVitality = function(damage) {
                return this.vitality - damage
            };
        }

        const hero = new Hero('Cody', 100); //Recien ac치 tengo el objeto literal


[[[  CLASES  ]]]
class Hero {
    constructor(alias, vitality) {
        this.alias = alias;
        this.vitality = vitality;
    }

    drecreaseVitality(damage) {
        return this.vitality - damage
    };
}

const hero = new Hero('Cody', 100);


[[[  HERENCIA  ]]]
class Super extends Hero {
    constructor(alias, vitality, power){
        super(alias, vitality);
        this.power = power;
    }
}


[[[  OPERADORES AVANZADOS  ]]]
* Destructuring Operator:
    const user = [1, 'Juan', 33, 'admin'];

    const [id, nombre, edad, rol] = user;

* Spread Operator:
    // con ARRAY
    const numeros = [1, 2, 3];
    const letras = ['a', 'b', 'c'];

    // const array = numeros.concat(letras);
    const array = [...numeros, ...letras];
    //            [1, 2, 3, 'a', 'b', 'c'];


    // con OBJETOS
    const viejoProducto = {id:1, nombre:"peruano"};
    const nuevoProducto = {precio:120, nombre:"peruanoide"};

    const producto = {...viejoProducto, ...nuevoProducto};
    //               {id:1, precio:120, nombre:"peruanoide"};
